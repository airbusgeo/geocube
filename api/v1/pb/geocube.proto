syntax = "proto3";
package geocube;
option go_package = "./pb;geocube";

import "google/api/annotations.proto";

import "pb/version.proto";
import "pb/catalog.proto";
import "pb/records.proto";
import "pb/variables.proto";
import "pb/layouts.proto";
import "pb/operations.proto";

// ApiGW https://cloud.google.com/endpoints/docs/grpc-service-config/reference/rpc/google.api

/**
  * API
  * Documentation may be detailed in Request/Response sections.
  */
service Geocube {
    // Create one or a list of records
    rpc CreateRecords(CreateRecordsRequest) returns (CreateRecordsResponse) {}
    // Get records from their ID
    rpc GetRecords(GetRecordsRequest)       returns (stream GetRecordsResponseItem)    {}
    // List records given criterias
    rpc ListRecords(ListRecordsRequest)     returns (stream ListRecordsResponseItem) {}
    // Update records, adding or updating tags
    rpc AddRecordsTags(AddRecordsTagsRequest) returns (AddRecordsTagsResponse) {}
    // Update records, removing tags
    rpc RemoveRecordsTags(RemoveRecordsTagsRequest) returns (RemoveRecordsTagsResponse) {}
    // Delete records
    rpc DeleteRecords(DeleteRecordsRequest) returns (DeleteRecordsResponse) {}
    
    // Create an AOI if not exists or returns the aoi id of the aoi.
    rpc CreateAOI(CreateAOIRequest) returns (CreateAOIResponse) {}
    // Get an AOI from its ID
    rpc GetAOI(GetAOIRequest)       returns (GetAOIResponse)    {}

    // Create a variable
    rpc CreateVariable(CreateVariableRequest) returns (CreateVariableResponse) {}
    // Get a variable given its id, name or one of its instance id
    rpc GetVariable(GetVariableRequest)       returns (GetVariableResponse) {}
    // Update some fields of a variable
    rpc UpdateVariable(UpdateVariableRequest) returns (UpdateVariableResponse) {}
    // Delete a variable iif no dataset has a reference on
    rpc DeleteVariable(DeleteVariableRequest) returns (DeleteVariableResponse) {}
    // List variables given a name pattern
    rpc ListVariables(ListVariablesRequest)   returns (stream ListVariablesResponseItem){}

    // Instantiate a variable 
    rpc InstantiateVariable(InstantiateVariableRequest) returns (InstantiateVariableResponse) {}
    // Update metadata of an instance
    rpc UpdateInstance(UpdateInstanceRequest) returns (UpdateInstanceResponse) {}
    // Delete an instance iif no dataset has a reference on
    rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse) {}

    // Create or update a palette that can be used to create a display of a dataset
    rpc CreatePalette(CreatePaletteRequest)returns (CreatePaletteResponse){}

    // GetInfo on containers
    rpc GetContainers(GetContainersRequest)                   returns (GetContainersResponse) {}
    // Index new datasets in the Geocube
    rpc IndexDatasets(IndexDatasetsRequest)                   returns (IndexDatasetsResponse) {}
    // List datasets from the Geocube
    rpc ListDatasets(ListDatasetsRequest)                     returns (ListDatasetsResponse) {}
    // Delete datasets using records, instances and/or filepath
    rpc DeleteDatasets(DeleteDatasetsRequest)                 returns (DeleteDatasetsResponse){}
    // Configurate a consolidation process
    rpc ConfigConsolidation(ConfigConsolidationRequest)       returns (ConfigConsolidationResponse){}
    // Get the configuration of a consolidation
    rpc GetConsolidationParams(GetConsolidationParamsRequest) returns (GetConsolidationParamsResponse){}
    // Start a consolidation job
    rpc Consolidate(ConsolidateRequest)                       returns (ConsolidateResponse){}
    // List the jobs given a name pattern
    rpc ListJobs(ListJobsRequest)                             returns (ListJobsResponse){}
    // Get a job given its name
    rpc GetJob(GetJobRequest)                                 returns (GetJobResponse){}
    // Delete jobs given their status
    rpc CleanJobs(CleanJobsRequest)                           returns (CleanJobsResponse){}
    // Retry a job
    rpc RetryJob(RetryJobRequest)                             returns (RetryJobResponse){}
    // Cancel a job
    rpc CancelJob(CancelJobRequest)                           returns (CancelJobResponse){}
    // Continue a job that is in waiting state
    rpc ContinueJob(ContinueJobRequest)                       returns (ContinueJobResponse){}

    // Get a cube of data given a CubeParams
    rpc GetCube(GetCubeRequest)               returns (stream GetCubeResponse){}
    // Get a XYZTile (can be used with a TileServer, provided a GRPCGateway is up)
    rpc GetXYZTile(GetTileRequest)            returns (GetTileResponse){
        option (google.api.http) = {
            get: "/v1/catalog/mosaic/{instance_id}/{x}/{y}/{z}/png" //?records.ids=XXXXX&records.ids=YYYYYY... &min=vmin&max=vmax  or ?filters.from_time=YYYY-MM-DD&filters.to_time=YYYY-MM-DD&filters.tags[key1]=value1&filter.tags[key2]=value2...
            response_body: "image.data"
        };
    }

    // Create a layout to be used for tiling or consolidation
    rpc CreateLayout(CreateLayoutRequest)                 returns (CreateLayoutResponse){}
    // Delete a layout given its name
    rpc DeleteLayout(DeleteLayoutRequest)                 returns (DeleteLayoutResponse){}
    // List layouts given a name pattern
    rpc ListLayouts(ListLayoutsRequest)                   returns (ListLayoutsResponse){}
    // Find all the layouts known for a set of containers
    rpc FindContainerLayouts(FindContainerLayoutsRequest) returns (stream FindContainerLayoutsResponse){}
    // Tile an AOI given a layout
    rpc TileAOI(TileAOIRequest)                           returns (stream TileAOIResponse){}

    // Create a grid that can be used to tile an AOI
    rpc CreateGrid(stream CreateGridRequest)     returns (CreateGridResponse){}
    // Delete a grid
    rpc DeleteGrid(DeleteGridRequest)            returns (DeleteGridResponse){}
    // List grids given a name pattern
    rpc ListGrids(ListGridsRequest)              returns (ListGridsResponse){}

    // Version of the GeocubeServer
    rpc Version(GetVersionRequest)               returns (GetVersionResponse){}
}
