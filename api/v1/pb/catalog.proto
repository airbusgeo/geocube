syntax = "proto3";
package geocube;
option go_package = "./pb;geocube";

import "pb/dataformat.proto";
import "pb/records.proto";
import "pb/layouts.proto";
import "pb/datasetMeta.proto";
import "pb/variables.proto";

/**
  * Shape of an image width x height x channels
  */
message Shape{
    int32 dim1 = 1;
    int32 dim2 = 2;
    int32 dim3 = 3;
}

/**
  * ByteOrder for the conversion between data type and byte.
  */
enum ByteOrder{
    LittleEndian = 0;
    BigEndian = 1;
}

/**
  * Header of an image (slice of the cube)
  * It describes the image, the underlying datasets and the way to recreate it from the array of byte :
  * 1. Append ImageHeader.data and ImageChunk.data from part=0 to part=nb_parts-1
  * 2. If compression=True, decompress the array of bytes using deflate
  * 3. Cast the result to the dtype using byteOrder
  * 4. Reshape the result
  */
message ImageHeader{
    Shape                shape           = 1;  // Shape of the image (widthxheight)
    DataFormat.Dtype     dtype           = 2;  // Type of the data (to interprete "ImageHeader.data + ImageChunk.data")
    int32                nb_parts        = 4;  // Number of parts the image is splitted into
    bytes                data            = 3;  // First part of the image as an array of bytes
    int64                size            = 5;  // Size of the full array of bytes
    ByteOrder            order           = 6;  // ByteOrder of the datatype
    bool                 compression     = 7;  // Deflate compressed data format, described in RFC 1951
    GroupedRecords       grouped_records = 11; // Group of records used to generate this image
    DatasetMeta          dataset_meta    = 10; // All information on the underlying datasets that composed the image
    string               error           = 9;  // If not empty, an error occured and the image was not retrieved.
}

/**
  * Chunk of the full image, to handle the GRPC limit of 4Mbytes/message
  */
message ImageChunk{
    int32 part = 1; // Index of the chunk (from 1 to ImageHeader.nb_parts-1). The first part (=0) is ImageHeader.data
    bytes data = 2; // Chunk of the full array of bytes
}

/**
  * ByteArray of a PNG image 256x256pixels
  */
message ImageFile{
    bytes data = 1;
}

/**
  * Available file formats
  */
enum FileFormat{
    Raw   = 0; // raw bitmap
    GTiff = 1;
}

/**
  * Request a cube of data
  */
message GetCubeRequest {
    oneof records_lister{
        RecordIdList         records         = 11; // List of record ids requested. At least one. One image will be returned by record (if not empty)
        RecordFilters        filters         = 2;  // Filters to list the records that will be used to create the cube
        GroupedRecordIdsList grouped_records = 12; // List of groups of record ids requested. At least one. One image will be returned by group of records (if not empty). All the datasets of a group of records will be merged together using the latest first.
    }

    repeated string instances_id      = 3; // Instances of a variable defining the kind of images requested. At least one, and all must be instance of the same variable. Only one is actually supported
    string          crs               = 4; // Coordinates Reference System of the output images (images will be reprojected on the fly if necessary)
    GeoTransform    pix_to_crs        = 5; // GeoTransform of the requested cube (images will be rescaled on the fly if necessary)
    Size            size              = 6; // Shape of the output images
    int32           compression_level = 7; // Define a level of compression to speed up the transfer, values: -3 to 9 (-2: Huffman only, -1:default, 0->9: level of compression from the fastest to the best compression, -3: disable the compression). The data is compressed by the server and decompressed by the Client. Use -3 or -2 if the bandwidth is not limited. 0 is level 0 of DEFLATE (thus, it must be decompressed by DEFLATE even though the data is not compressed). If the client can support -3, 0 is useless.
    bool            headers_only      = 8; // Only returns headers (including all metadatas on datasets)
    FileFormat      format            = 9; // Format of the output images
    Resampling      resampling_alg    = 10; // Resampling algorithm used for reprojecion. If undefined, the default resampling algorithm associated to the variable is used.
    bool            protocol_v11x     = 13; // For compatibility with older clients. Clients with version above 1.1.0 must set this field to true.
}

/**
  * Return global information on the requested cube
  */
message GetCubeResponseHeader{
    int64 count       = 1;
    int64 nb_datasets = 2;
    DataFormat ref_dformat    = 3; // Output dataformat
    Resampling resampling_alg = 4; // Resampling algorithm to use for reprojection
    GeoTransform geotransform = 5; // Geotransform used for mapping
    string       crs          = 6;
}

/**
  * Return either information on the cube, information on an image or a chunk of an image
  */
message GetCubeResponse {
    oneof response{
        GetCubeResponseHeader global_header = 3;
        ImageHeader           header        = 1;
        ImageChunk            chunk         = 2;
    }
}

/**
  * Request a cube from metadatas (provided by Geocube.GetCube())
  */
message GetCubeMetadataRequest{
  repeated DatasetMeta     datasets_meta   = 1; // List of Metadatas needed to download and generate the slices of the cube
  repeated GroupedRecords  grouped_records = 2; // List of GroupedRecords describing the slices of the cube
  DataFormat               ref_dformat     = 3; // Output dataformat
  Resampling               resampling_alg  = 4; // Resampling algorithm to use for reprojection
  GeoTransform             pix_to_crs      = 5;
  string                   crs             = 6;
  Size                     size            = 7;
  FileFormat               format          = 8; // Format of the output data
  bool                     predownload     = 9; // Predownload the datasets before merging them. When the dataset is remote and all the dataset is required, it is more efficient to predownload it.
  bool                     protocol_v11x   = 10; // For compatibility with older clients. Clients with version above 1.1.0 must set this field to true.
}

/**
  * Return either information on the cube, information on an image or a chunk of an image
  */
message GetCubeMetadataResponse{
    oneof response{
        GetCubeResponseHeader global_header = 3;
        ImageHeader           header        = 1;
        ImageChunk            chunk         = 2;
    }
}

/**
  * Request a web-mercator tile, given a variable and a group of records
  */
message GetTileRequest {
    string instance_id = 1;
    int32  x           = 2;
    int32  y           = 3;
    int32  z           = 4;
    float  min         = 8;
    float  max         = 9;

    oneof records_lister{
        GroupedRecordIds records = 6; // Group of record ids. At least one. All the datasets of the group of records will be merged together using the latest first.
        RecordFilters filters = 7; // All the datasets whose records have RecordTags and time between from_time and to_time
    }
}

/**
  * Return a 256x256 png image
  */
message GetTileResponse {
    ImageFile image = 1;
}
