// Code generated by "enumer -json -sql -type DType -trimprefix DType"; DO NOT EDIT.

package bitmap

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strings"
)

const _DTypeName = "UNDEFINEDUINT8UINT16UINT32INT8INT16INT32FLOAT32FLOAT64COMPLEX64"

var _DTypeIndex = [...]uint8{0, 9, 14, 20, 26, 30, 35, 40, 47, 54, 63}

const _DTypeLowerName = "undefineduint8uint16uint32int8int16int32float32float64complex64"

func (i DType) String() string {
	if i < 0 || i >= DType(len(_DTypeIndex)-1) {
		return fmt.Sprintf("DType(%d)", i)
	}
	return _DTypeName[_DTypeIndex[i]:_DTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DTypeNoOp() {
	var x [1]struct{}
	_ = x[DTypeUNDEFINED-(0)]
	_ = x[DTypeUINT8-(1)]
	_ = x[DTypeUINT16-(2)]
	_ = x[DTypeUINT32-(3)]
	_ = x[DTypeINT8-(4)]
	_ = x[DTypeINT16-(5)]
	_ = x[DTypeINT32-(6)]
	_ = x[DTypeFLOAT32-(7)]
	_ = x[DTypeFLOAT64-(8)]
	_ = x[DTypeCOMPLEX64-(9)]
}

var _DTypeValues = []DType{DTypeUNDEFINED, DTypeUINT8, DTypeUINT16, DTypeUINT32, DTypeINT8, DTypeINT16, DTypeINT32, DTypeFLOAT32, DTypeFLOAT64, DTypeCOMPLEX64}

var _DTypeNameToValueMap = map[string]DType{
	_DTypeName[0:9]:        DTypeUNDEFINED,
	_DTypeLowerName[0:9]:   DTypeUNDEFINED,
	_DTypeName[9:14]:       DTypeUINT8,
	_DTypeLowerName[9:14]:  DTypeUINT8,
	_DTypeName[14:20]:      DTypeUINT16,
	_DTypeLowerName[14:20]: DTypeUINT16,
	_DTypeName[20:26]:      DTypeUINT32,
	_DTypeLowerName[20:26]: DTypeUINT32,
	_DTypeName[26:30]:      DTypeINT8,
	_DTypeLowerName[26:30]: DTypeINT8,
	_DTypeName[30:35]:      DTypeINT16,
	_DTypeLowerName[30:35]: DTypeINT16,
	_DTypeName[35:40]:      DTypeINT32,
	_DTypeLowerName[35:40]: DTypeINT32,
	_DTypeName[40:47]:      DTypeFLOAT32,
	_DTypeLowerName[40:47]: DTypeFLOAT32,
	_DTypeName[47:54]:      DTypeFLOAT64,
	_DTypeLowerName[47:54]: DTypeFLOAT64,
	_DTypeName[54:63]:      DTypeCOMPLEX64,
	_DTypeLowerName[54:63]: DTypeCOMPLEX64,
}

var _DTypeNames = []string{
	_DTypeName[0:9],
	_DTypeName[9:14],
	_DTypeName[14:20],
	_DTypeName[20:26],
	_DTypeName[26:30],
	_DTypeName[30:35],
	_DTypeName[35:40],
	_DTypeName[40:47],
	_DTypeName[47:54],
	_DTypeName[54:63],
}

// DTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DTypeString(s string) (DType, error) {
	if val, ok := _DTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to DType values", s)
}

// DTypeValues returns all values of the enum
func DTypeValues() []DType {
	return _DTypeValues
}

// DTypeStrings returns a slice of all String values of the enum
func DTypeStrings() []string {
	strs := make([]string, len(_DTypeNames))
	copy(strs, _DTypeNames)
	return strs
}

// IsADType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i DType) IsADType() bool {
	for _, v := range _DTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for DType
func (i DType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for DType
func (i *DType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("DType should be a string, got %s", data)
	}

	var err error
	*i, err = DTypeString(s)
	return err
}

func (i DType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *DType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	var str string
	switch v := value.(type) {
	case []byte:
		str = string(v)
	case string:
		str = v
	case fmt.Stringer:
		str = v.String()
	default:
		return fmt.Errorf("invalid value of DType: %[1]T(%[1]v)", value)
	}

	val, err := DTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
